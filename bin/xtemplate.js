#!/usr/bin/env node
//noinspection JSUnresolvedFunction,JSUnresolvedVariable
/**
 * Generate xtemplate function by xtemplate file using kissy xtemplate.
 * @author yiminghe@gmail.com
 */
var argv = require('optimist')
        .demand('packageName')
        .alias('n', 'packageName')
        .describe('n', 'kissy package name')
        .demand('packagePath')
        .alias('p', 'packagePath')
        .describe('p', 'kissy package path')
        .describe('e', 'xtemplate file encoding')
        .alias('encoding', 'e')
        .describe('w', 'watch xtemplate file change')
        .boolean('w')
        .alias('watch', 'w')
        .usage('generate kissy module file from kissy xtemplate file.\n' +
            'usage: $0 -name [package name] -path [package path]').argv,
    S = require('../build/kissy-nodejs'),
    chokidar = require('chokidar'),
    js_beautify = require('js-beautify').js_beautify,
    fs = require('fs'),
    tpl = argv.tpl,
    path = require('path'),
    packageName = argv.packageName,
    packagePath = argv.packagePath,
    encoding = argv.e || 'utf-8',
    cwd = process.cwd();

packagePath = path.resolve(cwd, packagePath);

var codeTemplate = '' +
    '/*\n' +
    '  Generated by kissy-xtemplate.' +
    '*/\n' +
    'KISSY.add("{module}", function(){\n' +
    'return {code}\n' +
    '});';

function normalizeSlash(str) {
    return str.replace(/\\/g, '/');
}

function my_js_beautify(str) {
    var opts = {"indent_size": "4", "indent_char": " ",
        "preserve_newlines": true, "brace_style": "collapse",
        "keep_array_indentation": false, "space_after_anon_function": true};
    return js_beautify(str, opts);
}

S.use('xtemplate/compiler', function (S, XTemplateCompiler) {
    function compile(name, tpl, modulePath) {
        var tplContent = fs.readFileSync(tpl, encoding);
        var code = XTemplateCompiler.compileToStr(tplContent);
        var moduleCode = my_js_beautify(S.substitute(codeTemplate, {
            module: name,
            code: code
        }));
        fs.writeFileSync(modulePath, moduleCode, encoding);
        console.info('generate tpl module: ' + modulePath + ' at ' + (new Date().toLocaleString()));
    }

    function process(filePath) {
        if (S.endsWith(filePath, '.tpl.html')) {
            var name = normalizeSlash(packageName + '/' + path.relative(packagePath, filePath));
            name = name.replace(/\.tpl\.html$/, '-tpl');
            var modulePath = filePath.replace(/\.tpl\.html$/, '-tpl.js');
            compile(name, filePath, modulePath);
        }
    }

    if (argv.watch) {
        var watcher = chokidar.watch(packagePath, {ignored: /^\./, persistent: true});
        watcher.on('add', process).on('change', process);
        watcher.close();
    } else {
        var walk = require('walk');
        //noinspection JSUnresolvedFunction
        var walker = walk.walk(packagePath);
        walker.on("file", function (root, fileStats, next) {
            var filePath = normalizeSlash(root + '/' + fileStats.name);
            process(filePath);
            next();
        });
    }
});