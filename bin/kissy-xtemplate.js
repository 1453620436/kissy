#!/usr/bin/env node
//noinspection JSUnresolvedFunction,JSUnresolvedVariable
/**
 * Generate xtemplate function by xtemplate file using kissy xtemplate.
 * @author yiminghe@gmail.com
 */
var program = require('./lib/commander');

program
    .option('-p, --package-path <packagePath>', 'Set kissy package path')
    .option('-s, --suffix [suffix]', 'Set xtemplate file suffix', '')
    .option('-e, --encoding [encoding]', 'Set xtemplate file encoding', 'utf-8')
    .option('-w, --watch', 'Watch xtemplate file change')
    .parse(process.argv);

var S = require('../lib/loader'),
    util = require('../lib/util'),
    XTemplateCompiler = require('../lib/xtemplate').XTemplate.Compiler,
    chokidar = require('chokidar'),
/*jshint camelcase: false*/
    jsBeautify = require('js-beautify').js_beautify,
    fs = require('fs'),
    path = require('path'),
    packagePath = program.packagePath,
    encoding = program.encoding,
    suffix = program.suffix,
    cwd = process.cwd();

var suffixReg;

if (suffix) {
    suffixReg = new RegExp('\\.' + suffix + '$', 'g');
}

packagePath = path.resolve(cwd, packagePath);
var jshint = '/*jshint quotmark:false, loopfunc:true, ' +
    'indent:false, asi:true, unused:false, boss:true, sub:true*/\n';

var tplTemplate = '' +
    '/*\n' +
    '  Generated by kissy-tpl2mod.' +
    '*/\n' +
    jshint +
    'KISSY.add(function(){\n' +
    'return \'{code}\';\n' +
    '});';

function normalizeSlash(str) {
    return str.replace(/\\/g, '/');
}

function getFunctionName(path) {
    var name = path;
    if (name.indexOf('/') !== -1) {
        name = name.substring(name.lastIndexOf('/') + 1);
    }
    name = name.replace(/-([a-z])/ig, function () {
        return arguments[1].toUpperCase();
    });
    name = name.replace(/\..+$/, '');
    return name;
}


function myJsBeautify(str) {
    var opts = {
        'indent_size': '4',
        'indent_char': ' ',
        'preserve_newlines': true,
        'brace_style': 'collapse',
        'keep_array_indentation': false,
        'space_after_anon_function': true
    };
    return jsBeautify(str, opts);
}

function compile(tplFilePath, modulePath) {
    var tplContent = fs.readFileSync(tplFilePath, encoding);
    var functionName = getFunctionName(tplFilePath);
    var moduleCode = myJsBeautify(
            '/** Compiled By kissy-xtemplate */\n' +
            'KISSY.add(function(S,require,exports,module){\n' +
            jshint +
            'var ' + functionName + ' = ' +
            XTemplateCompiler.compileToStr(tplContent, tplFilePath, true)) + ';\n' +
        functionName + '.TPL_NAME = module.name;\n' +
        functionName + '.version = "' + S.version + '";\n' +
        'return ' + functionName + '\n' +
        '});';
    fs.writeFileSync(modulePath, moduleCode, encoding);
    console.info('generate xtpl module: ' + modulePath + ' at ' + (new Date().toLocaleString()));
}

function generate(filePath) {
    var modulePath;
    if (suffix && util.endsWith(filePath, '.' + suffix)) {
        modulePath = filePath.replace(suffixReg, '.js');
        compile(filePath, modulePath);
    } else if (util.endsWith(filePath, '.xtpl.html') || util.endsWith(filePath, '-xtpl.html')) {
        modulePath = filePath.replace(/[.-]xtpl\.html$/, '-xtpl.js');
        compile(filePath, modulePath);
    } else if (util.endsWith(filePath, '.tpl.html')) {
        modulePath = filePath.replace(/\.tpl\.html$/, '-tpl.js');
        var tplContent = fs.readFileSync(filePath, encoding);
        tplContent = tplContent.replace(/\\/g, '\\')
            .replace(/\r?\n/g, '\\n')
            .replace(/'/g, '\\\'');
        var moduleCode = myJsBeautify(util.substitute(tplTemplate, {
            code: tplContent
        }));
        fs.writeFileSync(modulePath, moduleCode, encoding);
        console.info('generate tpl module: ' + modulePath +
            ' at ' + (new Date().toLocaleString()));
    }
}

if (program.watch) {
    var watcher = chokidar.watch(packagePath, {ignored: /^\./, persistent: true});
    watcher.on('add', generate).on('change', generate);
    watcher.close();
} else {
    var walk = require('walk');
    //noinspection JSUnresolvedFunction
    var walker = walk.walk(packagePath);
    walker.on('file', function (root, fileStats, next) {
        var filePath = normalizeSlash(root + '/' + fileStats.name);
        generate(filePath);
        next();
    });
}